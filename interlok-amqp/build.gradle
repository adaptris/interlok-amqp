import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

ext {
  componentName='Interlok Messaging/AMQP'
  componentDesc='Treating a AMQP 0.9.0/1.0 Provider as a JMS via Apache QPID'
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  activeMqVersion= '5.18.3'
  nettyVersion="4.1.109.Final"
}

dependencies {
  api ("org.apache.qpid:qpid-jms-client:1.10.0"){
    // 4.1.43.Final has a HTTP request smuggler vuln, so
    // we exclude netty, and force the fixed version
    // dependabot will sort us out...
    exclude group: "io.netty"
  }
  api ("org.apache.qpid:qpid-java-build:6.1.7")
  api ("org.apache.qpid:qpid-client:6.4.0")
  api ("org.apache.qpid:proton-j:0.34.1")
  api ("com.rabbitmq.jms:rabbitmq-jms:2.4.0")
  api ("com.rabbitmq:amqp-client:5.21.0")

  implementation ("io.netty:netty-buffer:$nettyVersion")
  implementation ("io.netty:netty-common:$nettyVersion")
  implementation ("io.netty:netty-handler:$nettyVersion")
  implementation ("io.netty:netty-transport:$nettyVersion")
  implementation ("io.netty:netty-transport-native-epoll:$nettyVersion")
  implementation ("io.netty:netty-transport-native-unix-common:$nettyVersion")
  implementation ("io.netty:netty-transport-native-kqueue:$nettyVersion")
  implementation ("io.netty:netty-codec:$nettyVersion")
  implementation ("io.netty:netty-codec-http:$nettyVersion")

  testImplementation("org.apache.activemq:activemq-client:$activeMqVersion")
  testImplementation("org.apache.activemq:activemq-jaas:$activeMqVersion")
  testImplementation("org.apache.activemq:activemq-kahadb-store:$activeMqVersion")
  testImplementation("org.apache.activemq:activemq-amqp:$activeMqVersion")
  testImplementation("org.apache.activemq.protobuf:activemq-protobuf:1.1")
  testImplementation("org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1")
}


task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.extensions.delombokTask
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}

artifacts {
  archives javadocJar
  archives examplesJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }
      artifact sourcesJar { classifier "sources" }
      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.8.0+")
        properties.appendNode("tags", "amqp,jms")
        properties.appendNode("license", "false")
        properties.appendNode("externalUrl", "https://www.amqp.org/")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-amqp")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}


delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
processTestResources.dependsOn copyUnitTestProperties
